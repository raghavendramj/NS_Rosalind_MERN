Introduction to Stack â€“ Data Structure

Stack
It is a linear data structure that follows a particular order in which the operations are performed.

LIFO( Last In First Out ):

This strategy states that the element that is inserted last will come out first. You can take a pile of plates kept on top of each other as a real-life example. The plate which we put last is on the top and since we remove the plate that is at the top, we can say that the plate that was put last comes out first.

Basic Operations on Stack
In order to make manipulations in a stack, there are certain operations provided to us.

push() to insert an element into the stack
pop() to remove an element from the stack
top() Returns the top element of the stack.
isEmpty() returns true is stack is empty else false
size() returns the size of stack

Push:
Adds an item to the stack. If the stack is full, then it is said to be an Overflow condition.


Algorithm for push:

begin
	if stack is full
		return
	else
		increment top
		stack[top] assign value
		return
end


Pop:
Removes an item from the stack. The items are popped in the reversed order in which they are pushed. If the stack is empty, then it is said to be an Underflow condition.

begin
	if stack is empty
		return
	else
		store value of stack[top] in delValue
		decrement top
		return delValue
end


Top:
Returns the top element of the stack.

begin
	 return stack[top]
end


isEmpty:
Returns true if the stack is empty, else false.

begin
	 if top < 1
		return true
	else
		return false
end


Time Complexity
Operations  	Complexity
push() 			O(1)
pop()   			O(1)
isEmpty() 		O(1)
size()				O(1)


Types of Stacks:
	Register Stack: 
	Memory Stack:

Applications of the stack:
	Infix to Postfix /Prefix conversion
	Redo-undo features at many places like editors, photoshop.
	Forward and backward features in web browsers


Implementation of Stack: 
	There are two ways to implement a stack
		Using array
		Using linked list