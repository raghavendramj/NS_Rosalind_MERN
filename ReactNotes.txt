What Is React?
React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called “components”.

Why we use ReactJS?

The main objective of ReactJS is to develop User Interfaces (UI) that improves the speed of the apps. It uses virtual DOM (JavaScript object), which improves the performance of the app.

The JavaScript virtual DOM is faster than the regular DOM. We can use ReactJS on the client and server-side as well as with other frameworks. It uses component and data patterns that improve readability and helps to maintain larger apps.


React Environment Setup

Pre-requisite for ReactJS

NodeJS and NPM
React and React DOM
Webpack
Babel


Ways to install ReactJS
There are two ways to set up an environment for successful ReactJS application. They are given below.

Using the npm command
cd /reactproject/
npm init -y
npm install react react-dom --save
npm install webpack webpack-dev-server webpack-cli --save
npm install babel-core babel-loader babel-preset-env babel-preset-react babel-webpack-plugin --save-dev
These files are index.html, App.js, main.js, webpack.config.js and, .babelrc.

npm install react --save
npm install react-dom --save



Using the create-react-app command
Install NodeJS and NPM
Install React
	cd /reactproject/
	npm install -g create-react-app
	create-react-app  newton-react-app


React Features
	JSX
		JSX stands for JavaScript XML.
	Components
		ReactJS is all about components.
		ReactJS application is made up of multiple components, and
		each component has its own logic and controls.
		These components can be reusable which help you to maintain the code when working on larger scale projects.

	One-way Data Binding
	Virtual DOM
	Simplicity
	Performance

React JSX
	 React components have a render function
	 The render function specifies the HTML output of a React component.
	 JSX(JavaScript Extension), is a React extension which allows writing JavaScript code that looks like HTML
	 In other words, JSX is an HTML-like syntax used by React that extends ECMAScript so that HTML-like syntax can co-exist with JavaScript/React code


Sample Class component with .jsx

import React, { Component } from 'react';
class App extends Component{
   render(){
      return(
		<div> Welcome to React JS </div>
		<p data-demoAttribute="test">Some dummy content </div>
		 <h1 style={myStyle}>Newton School</h1>
		<div className ="colorBlue"> Hello world </div>

	  );
   }
}
export default App;

JSX Attributes
In JSX, we can specify attribute values in two ways:
1. As String Literals: We can specify the values of attributes in double quotes:
2. As Expressions: We can specify the values of attributes as expressions using curly braces {}:


Some of the javascript properties are ..

document.getElementById("test").className = 'blueColor';
document.getElementById("test").style.fontSize = '60px';


React Components

A Component is considered as the core building blocks of a React application. It makes the task of building UIs much easier. Each component exists in the same space, but they work independently from one another and merge all in a parent component, which will be the final UI of your application.


In ReactJS, we have mainly two types of components. They are
	Functional Components
	In React, function components are a way to write components that only contain a render method and don't have their own state.
	They are simply JavaScript functions that may or may not receive data as parameters. We can create a function that takes props(properties) as input and returns what should be rendered.
	Class Components

React State
	The state is an updatable structure that is used to contain data or information about the component.
	The state in a component can change over time.
	The change in state over time can happen as a response to user action or system event.

	A state must be kept as simple as possible.
	It can be set by using the setState() method and calling setState() method triggers UI updates.
	A state represents the component's local state or information. It can only be accessed or modified inside the component or by the component directly.
	To set an initial state before any interaction occurs, we need to use the getInitialState() method.


React Props
	Props stand for "Properties."
	They are read-only components.
	It is an object which stores the value of attributes of a tag and work similar to the HTML attributes.
	It gives a way to pass data from one component to other components.
	It is similar to function arguments.
	Props are passed to the component in the same way as arguments passed in a function.


Difference between States  and Props

Props :-
	Props are read-only.
	Props are immutable.
	Props allow you to pass data from one component to other components as an argument.
	Props can be accessed by the child component.
	Props are used to communicate between components.
	Stateless component can have Props.
	Props make components reusable.
	Props are external and controlled by whatever renders the component.

State :-
	State changes can be asynchronous.
	State is mutable.
	State holds information about the components.
	State cannot be accessed by child components.
	States can be used for rendering dynamic changes with the component.
	Stateless components cannot have State.
	State cannot make components reusable.
	The State is internal and controlled by the React Component itself.


Assignment :-
	Registration Page -> Component 1
	Validation Page -> Component 2


React Component Life-Cycle
Every component creation process involves various lifecycle methods.
These lifecycle methods are termed as component's lifecycle.
The lifecycle of the component is divided into four phases.

They are:
	Initial Phase
	Mounting Phase
	Updating Phase
	Unmounting Phase

1. Initial Phase :-
	The component starts its journey on a way to the DOM.
	In this phase, component contains the default Props and initial State
	 These default properties are done in the constructor of a component.

	 getDefaultProps()
	 getInitialState()

2. Mounting Phase
	In this phase, the instance of a component is created and inserted into the DOM.

	componentWillMount()
		This is invoked immediately before a component gets rendered into the DOM.
		In the case, when you call setState() inside this method, the component will not re-render.

	componentDidMount()
		This is invoked immediately after a component gets rendered and placed on the DOM.
		Now, you can do any DOM querying operations.

	render()
		This method is defined in each and every component.
		It is responsible for returning a single root HTML node element

3. Updating Phase
	 Here, we get new Props and change State.
	 This phase also allows to handle user interaction and provide communication with the components hierarchy.

	 componentWillRecieveProps()
	 shouldComponentUpdate()
	 componentWillUpdate()
	 render()
	 componentDidUpdate()

4. Unmounting Phase
	when a component instance is destroyed and unmounted from the DOM.
	componentWillUnmount()


React Forms
Creating Form
React offers a stateful,
Reactive approach to build a form.

The form is usually implemented by using controlled components.

There are mainly two types of form input in React.
	Uncontrolled component
	 The DOM itself handles the form data.
	 Here, the HTML elements maintain their own state that will be updated when the input value changes.
	 . To write an uncontrolled component, you need to use a ref to get form values from the DOM.


 Controlled component


React Router
	Routing is a process in which a user is directed to different pages based on their action or request
	ReactJS Router is mainly used for developing Single Page Web Applications.
	React Router is used to define multiple routes in the application.
	When a user types a specific URL into the browser, and if this URL path matches any 'route' inside the router file, the user will be redirected to that particular route.

React contains three different packages for routing. These are:
	react-router: It provides the core routing components and functions for the React Router applications.
	react-router-native: It is used for mobile applications.
	react-router-dom: It is used for web applications design.

	npm install react-router-dom --save


Adding Navigation using Link component
	Sometimes, we want to need multiple links on a single page.
	When we click on any of that particular Link, it should load that page which is associated with that path without reloading the web page. 
	< Link> 
	
	Configuring The Router
		BrowserRouter 
	
	index.html
		import React from "react"
		import ReactDOM from "react-dom/client"
		import App from "./App"
		import { BrowserRouter } from "react-router-dom"
		const root = ReactDOM.createRoot(document.getElementById("root"))
		root.render(
		  <React.StrictMode>
			<BrowserRouter>
			  <App />
			</BrowserRouter>
		  </React.StrictMode>
		)
		
	app.jsx
	export function App(){
		 return (
			<React.Fragment>
				<nav>
					<ul>
						<li><Link to="/"> Home</li>
						<li><Link to="/"> Books</li>
					</ul>
				</nav>
					<Routes>
					  <Route path="/" element={<Home />} />
					  <Route path="/books" element={<BookList />} />
					  <Route path="/books/:id" element={<Book />} />
					  <Route path="/books/new`" element={<NewBook />} />
					 <Route path="*" element={<NotFound />} />
					</Routes>
			</React.Fragment> 
	}

	book.jsx
		import { useParams } from "react-router-dom";
		export function Book() {
		  const { id } = useParams()

		  return (
			<h1>Book {id}</h1>
		  )
		} 
			
	Nested Routes
		<Routes>
		  <Route path="/" element={<Home />} />
		  <Route path="/books">
			<Route index element={<BookList />} />
			<Route path=":id" element={<Book />} />
			<Route path="new" element={<NewBook />} />
		  </Route>
		  <Route path="*" element={<NotFound />} />
		</Routes>


<React.Fragment>
	<Link to="/home">Home</Link>
	<Link to="/about">About</Link>
	<BrowserRouter>
		<Routes>
			<Route element={<Home />}> </Route>
			<Route element={<About />}> </Route>
		</Routes> 
	</BrowserRouter>
</React.Fragment>


Create a router
	-> index.html
		-> BrowserRouter > App
	-> app.jsx
			-> Routes
				-> Home
				-> NotFound
				-> Child route 
	-> childroutes.jsx
			-> EmployeeList
			-> Employee
			-> NewEmployee
	-> Employee.jsx
		-> parameter -> id
	-> newEmployee.jsx
		-> parameter -> name 
	-> shared data across child routes
		-> author
		
React CSS
	There are five distinct ways in which you can style and write CSS in React:
		Inline styles in React
		Reusable variables
		Using external StyleSheet
		CSS Modules
		CSS-in-JS
		
		
React Hooks
-----------------
Version supported:- React in version 16.8

Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer needed.

useState
The React useState Hook allows us to track state in a function component
useEffect
The useEffect Hook allows you to perform side effects in your components.








